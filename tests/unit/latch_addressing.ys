read_slang <<EOF
module top(waddr1, waddr2, en1, en2, wdata1, wsidedata1, wdata2);
	parameter int unsigned NUM_WORDS = 4;
	parameter int unsigned DATA_WIDTH = 4;
	input [$clog2(NUM_WORDS)-1:0] waddr1;
	input [$clog2(NUM_WORDS)-1:0] waddr2;
	input en1;
	input en2;
	input [DATA_WIDTH-1:0] wdata1;
	input [DATA_WIDTH-1:0] wsidedata1;
	input [DATA_WIDTH-1:0] wdata2;

	logic [NUM_WORDS-1:0][DATA_WIDTH-1:0] q1;
	always_latch begin
		if (en1) begin
			q1[waddr1] <= wdata1;
			q1[3] <= wsidedata1;
		end
		if (en2)
			q1[waddr2] <= wdata2;
	end

	logic [NUM_WORDS-1:0][DATA_WIDTH-1:0] q2;
	always_latch begin
		if (en1) begin
			for (int i = 0; i < NUM_WORDS; i++)
				if (waddr1 == i)
					q2[i] <= wdata1;
			q2[3] <= wsidedata1;
		end
		if (en2) begin
			for (int i = 0; i < NUM_WORDS; i++)
				if (waddr2 == i)
					q2[i] <= wdata2;
		end
	end

	always_comb
		assert(q1 === q2);
endmodule
EOF
prep
async2sync
chtype -map $ff __ff

read_verilog -icells <<EOF
(* do_flatten *)
module __ff (D, Q, gclk);
parameter WIDTH = 1;
input gclk;
input [WIDTH-1:0] D;
output reg [WIDTH-1:0] Q;
$dff #(.CLK_POLARITY(1), .WIDTH(WIDTH)) dff(.D(D), .Q(Q), .CLK(gclk));
endmodule
EOF

add -global_input gclk 1
hierarchy -top top
flatten
sat -seq 3 -tempinduct -tempinduct-inductonly -verify -enable_undef -prove-asserts -show-public top
